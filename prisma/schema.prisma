generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  MANAGER
  CLIENT
}

enum InvoiceStatus {
  DRAFT
  SENT
  APPROVED
  PAID
  VOID
}

enum BillingModel {
  HOURLY
  FIXED
  MILESTONE
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  image         String?
  memberships   Membership[]
  timeEntries   TimeEntry[]
  messages      Message[]
  ownedWorkspaces Workspace[] @relation("WorkspaceOwner")

  createdAt     DateTime    @default(now())
}

model Workspace {
  id            String       @id @default(cuid())
  name          String
  ownerId       String
  owner         User         @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  memberships   Membership[]
  clients       Client[]
  projects      Project[]
  invoices      Invoice[]
  invites       Invite[]     // Opposite relation field for Invite.workspace
  createdAt     DateTime     @default(now())
}

model Invite {
  id            String   @id @default(cuid())
  workspaceId   String
  role          Role
  email         String?
  token         String   @unique
  expiresAt     DateTime
  consumedAt    DateTime?
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  @@index([workspaceId, token])
}


model Membership {
  id          String    @id @default(cuid())
  userId      String
  workspaceId String
  role        Role
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  @@unique([userId, workspaceId])
}

model Client {
  id            String     @id @default(cuid())
  workspaceId   String
  email         String?
  name          String
  company       String?
  workspace     Workspace  @relation(fields: [workspaceId], references: [id])
  projects      Project[]
  invoices      Invoice[]  // Added opposite relation field for Invoice.client
  createdAt     DateTime   @default(now())
}

model Project {
  id            String     @id @default(cuid())
  workspaceId   String
  clientId      String
  name          String
  billingModel  BillingModel
  hourlyRate    Int?       // in cents
  budgetCents   Int?
  scope         String?
  workspace     Workspace  @relation(fields: [workspaceId], references: [id])
  client        Client     @relation(fields: [clientId], references: [id])
  tasks         Task[]
  threads       Thread[]
  invoices      Invoice[]  // Opposite relation field for Invoice.project
  createdAt     DateTime   @default(now())
}

model Task {
  id          String    @id @default(cuid())
  projectId   String
  title       String
  notes       String?
  status      String     @default("open")
  project     Project    @relation(fields: [projectId], references: [id])
  timeEntries TimeEntry[]
}

model TimeEntry {
  id          String   @id @default(cuid())
  taskId      String
  userId      String
  startedAt   DateTime
  endedAt     DateTime
  minutes     Int
  notes       String?
  task        Task     @relation(fields: [taskId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  @@index([userId])
}

model Invoice {
  id            String        @id @default(cuid())
  workspaceId   String
  clientId      String
  projectId     String?
  status        InvoiceStatus @default(DRAFT)
  issueDate     DateTime      @default(now())
  dueDate       DateTime?
  currency      String        @default("USD")
  subtotalCents Int           @default(0)
  taxCents      Int           @default(0)
  totalCents    Int           @default(0)
  workspace     Workspace     @relation(fields: [workspaceId], references: [id])
  client        Client        @relation(fields: [clientId], references: [id])
  project       Project?      @relation(fields: [projectId], references: [id])

  items         InvoiceItem[]
  payments      Payment[]
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  description String
  qty         Int      @default(1)
  unitCents   Int
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
}

model Payment {
  id            String   @id @default(cuid())
  invoiceId     String
  provider      String   // e.g. "stripe"
  providerRef   String   @unique
  amountCents   Int
  status        String   // "succeeded","failed","pending"
  paidAt        DateTime?
  invoice       Invoice  @relation(fields: [invoiceId], references: [id])
}

model Thread {
  id          String    @id @default(cuid())
  projectId   String
  title       String?
  project     Project   @relation(fields: [projectId], references: [id])
  messages    Message[]
}

model Message {
  id          String   @id @default(cuid())
  threadId    String
  senderId    String
  body        String
  createdAt   DateTime @default(now())
  thread      Thread   @relation(fields: [threadId], references: [id])
  sender      User     @relation(fields: [senderId], references: [id])
}
