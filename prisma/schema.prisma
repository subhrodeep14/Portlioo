generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
}

enum SenderType {
  FREELANCER
  CLIENT
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  clients       Client[]
  invoices      Invoice[]
  conversations Conversation[]
}

model Client {
  id            String        @id @default(cuid())
  name          String
  email         String
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  invoices      Invoice[]
  conversations Conversation[]
}

model Invoice {
  id        String        @id @default(cuid())
  title     String
  amount    Float
  dueDate   DateTime
  status    InvoiceStatus @default(PENDING)
  clientId  String
  client    Client        @relation(fields: [clientId], references: [id])
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Conversation {
  id        String     @id @default(cuid())
  userId    String
  clientId  String
  user      User       @relation(fields: [userId], references: [id])
  client    Client     @relation(fields: [clientId], references: [id])
  messages  Message[]
  files     File[]
  createdAt DateTime   @default(now())
}

model Message {
  id             String       @id @default(cuid())
  content        String
  senderType     SenderType
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  createdAt      DateTime     @default(now())
}

model File {
  id             String       @id @default(cuid())
  url            String
  fileName       String
  uploadedByType SenderType
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  createdAt      DateTime     @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
